#!/usr/bin/env node
var argv = require('yargs')

  .usage('Usage: $0 <command>')
  .demand(1)

  .command('init', 'Create a new NomadFile.js')

  .command('log', 'Show migration logs')

  .command('up', 'Apply new migrations to the database', function(yargs) {

    args = yargs
      .usage('Usage: $0 up [target] [options]')
      .example('$0 up')
      .example('$0 up -f')
      .example('$0 up addPhoneToUser')

      .option('force', {
        alias: 'f',
        describe: 'Force non reversable migrations to be applied',
        type: 'string'
      })

      .help('help')
      .alias('help', 'h')
  })

  .command('down', 'Apply new migrations to the database', function(yargs) {

    args = yargs
      .usage('Usage: $0 down <target> [options]')
      .demand(2)
      .example('$0 down addPhoneToUser')
      .example('$0 down 20150128-120000-00.addPhoneToUser')

      .help('help')
      .alias('help', 'h')
  })

  .command('create', 'Create a new migration', function(yargs) {

    argv = yargs
      .usage('Usage: $0 create [options]')
      .example('$0 create')
      .example('$0 create -n addPhoneToUser -d "Adds phone number to the user model"')

      .option('name', {
        alias: 'n',
        describe: 'The name of the new migration',
        type: 'string'
      })
      .option('description', {
        alias: 'd',
        describe: 'A description of the new migration',
        type: 'string'
      })

      .help('help')
      .alias('help', 'h')
  })

  .help('help')
  .alias('help', 'h')

  .argv;


var path     = require('path');
var chalk    = require('chalk');
var inquirer = require('inquirer');
var nomad    = require('../');


switch(argv._[0]) {
  case 'up'    : return migrateUp();
  case 'down'  : return migrateDown();
  case 'init'  : return initNomadFile();
  case 'log'   : return showMigrationLog();
  case 'create': return createMigration();
}

function confirmWriteToDisk(migration, next, stop) {
  console.log();
  inquirer.prompt([{
    type   : 'confirm',
    name   : 'isOk',
    default: false,
    message: 'The migration ' + chalk.cyan(migration.name) + ' is not on ' +
    'disk. Do you want to create it on disk?'
  }], function(answers) {
    if (!answers.isOk) { return stop(); }
    console.log();
    next(null);
  });
};

function migrateUp() {
  console.log();
  console.log(chalk.white.bold('Migrate Up'));
  console.log();

  var confirmMigration = function(migration, next, stop) {
    console.log('Applying migration ' + chalk.cyan(migration.name));

    if (!migration.isReversable) {
      console.log();
      inquirer.prompt([{
        type   : 'confirm',
        name   : 'isOk',
        default: false,
        message: 'The migration ' + chalk.cyan(migration.name) + ' is not ' +
        'reversable. Are you sure you want to apply it?'
      }], function(answers) {
        if (!answers.isOk) { return stop(); }
        console.log();
        next(null);
      });
    } else {
      next(null);
    }
  };

  return nomad.up({
    targetMigration   : argv._[1],
    confirmMigration  : confirmMigration,
    confirmWriteToDisk: confirmWriteToDisk
  }, function(err, count) {
    if (err) { throw err; }
    console.log(count ? count + ' migrations applied' : 'no migrations pending');
    console.log();
    console.log(chalk.white.bold('Operation Complete'));
    console.log();
  });
}

function migrateDown() {
  console.log();
  console.log(chalk.white.bold('Migrate Down'));
  console.log();

  var confirmMigration = function(migration, next, stop) {
    console.log('Rolling back migration ' + chalk.red(migration.name));
    next(null);
  };

  return nomad.down({
    targetMigration : argv._[1],
    confirmMigration: confirmMigration,
    confirmWriteToDisk: confirmWriteToDisk
  }, function(err, count) {
    if (err) { throw err; }
    console.log(count ? count + ' migrations rolled back' : 'no migrations applied');
    console.log();
    console.log(chalk.white.bold('Operation Complete'));
    console.log();
  });
}

function initNomadFile() {
  console.log();
  console.log(chalk.white.bold('Initialize Nomad'));
  console.log();

  nomad.init(function(err, result) {
    if (err) { throw err; }
    var nomadFilePath = path.relative(process.cwd(), result.path);
    if (result.isNew) {
      console.log('Nomad file created at ' + chalk.cyan('./' + nomadFilePath));
    } else {
      console.log('Nomad file already exists at ' + chalk.cyan('./' + nomadFilePath));
    }
  });
}

function showMigrationLog() {
  console.log();
  console.log(chalk.white.bold('Migration Log'));
  console.log();

  nomad.log('cli', function(err, log) {
    if (err) { throw err; }
    console.log(log);
  });
}

function createMigration() {
  console.log();
  console.log(chalk.white.bold('Create New Nomad Migration'));
  console.log();

  var create = function(name, description) {
    nomad.create(name, description, function(err, result) {
      if (err) { throw err; }

      console.log();
      console.log('Created migration ' + chalk.cyan(result.name) + ' at ' + chalk.cyan(result.path));
    });
  };

  if (argv.name) {
    return create(argv.name, argv.description);
  }

  inquirer.prompt([
    { name: 'name'       , message: 'What do you want to name the migration?' },
    { name: 'description', message: 'What does the migration do?' }
  ], function(answers) {
    create(answers.name, answers.description);
  });
}
